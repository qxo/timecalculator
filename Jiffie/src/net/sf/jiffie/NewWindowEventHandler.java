/*
 * file:       NewWindowEventHandler.java
 * author:     Mark Richter
 * copyright:  (c) Packwood Software Limited 2004
 * date:       20/01/2005
 */

/*
 * This file is part of JIFFIE.
 *
 * JIFFIE is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * JIFFIE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with JIFFIE; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package net.sf.jiffie;

import com.jacob.com.Variant;


/**
 * This class implements an event handler which receives the new window event
 * generated by Internet Explore.
 * 
 * Note that the non-standard capitalisation of the method name is necessary 
 * to ensure that it matches exactly the name used by Internet Explorer. 
 * 
 * Detailed documentation on the event can be found at:
 * 
 * http://msdn.microsoft.com/library/default.asp?url=/workshop/browser/webbrowser/reflist_vb.asp
 * 
 * The following events are no implemented, as per the Microsoft documentation:
 * 
 * NewWindow   (Obsolete - use NewWindow2)
 */
public class NewWindowEventHandler extends AbstractEventHandler
{
   /**
    * Constructor.
    *
    * @param parentBrowser parent browser
    */
   public NewWindowEventHandler (InternetExplorer parentBrowser)
   {
      super (parentBrowser);
   }

   /**
    * NewWindow2 event handler.
    *
    * args[0] Object expression that, optionally, receives a new, hidden
    *         InternetExplorer object with no URL loaded.
    * args[1] Boolean value to determine whether the current navigation
    *         should be cancelled.
    *
    * @param args event arguments
    */
   public void NewWindow2 (Variant[] args)
   {
      //
      // Set up the new IE Object
      //
      InternetExplorer ie = new InternetExplorer();
      ie.setRegisterAsBrowser(true);
      args[0].putDispatch(ie.getDispatch());
      m_parentBrowser.addNewWindow(ie);

      //
      // Notify All Listeners 
      //
      for (NavigationListener l : m_navigationListeners)
      {
         if (l.newWindow2(ie) == true)
         {
            args[1].putBoolean(true);
         }
      }
   }
   
   /**
    * NewWindow3 event handler.
    * 
    * args[0]  Object expression that, optionally, receives a new, hidden 
    *          WebBrowser or InternetExplorer object with no URL loaded.
    * args[1]  Boolean value to determine whether the current navigation 
    *          should be cancelled.
    * args[2]  Flags from the NWMF enumeration that pertain to the new window.
    * args[3]  URL of the page opening the new window.
    * args[4]  URL being opened in the new window.
    *    
    * @param args event arguments
    */
   public void NewWindow3 (Variant[] args)
   {
      int flags = args[2].changeType(Variant.VariantInt).getInt();
      String opener = args[3].toString();
      String opening = args[4].toString();
   
      for (NavigationListener l : m_navigationListeners)
      {
         if (l.newWindow3(flags, opener, opening) == true)
         {
            args[2].putBoolean(true);
         }
      }      
   }
   
}
